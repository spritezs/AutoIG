MINION 3
**VARIABLES**
DISCRETE width_Function1D_00001 #
{1..22}
DISCRETE width_Function1D_00002 #
{1..22}
DISCRETE width_Function1D_00003 #
{1..22}
DISCRETE width_Function1D_00004 #
{1..22}
DISCRETE width_Function1D_00005 #
{1..22}
DISCRETE width_Function1D_00006 #
{1..22}
DISCRETE width_Function1D_00007 #
{1..22}
DISCRETE width_Function1D_00008 #
{1..22}
DISCRETE width_Function1D_00009 #
{1..22}
DISCRETE width_Function1D_00010 #
{1..22}
DISCRETE length_Function1D_00001 #
{1..21}
DISCRETE length_Function1D_00002 #
{1..21}
DISCRETE length_Function1D_00003 #
{1..21}
DISCRETE length_Function1D_00004 #
{1..21}
DISCRETE length_Function1D_00005 #
{1..21}
DISCRETE length_Function1D_00006 #
{1..21}
DISCRETE length_Function1D_00007 #
{1..21}
DISCRETE length_Function1D_00008 #
{1..21}
DISCRETE length_Function1D_00009 #
{1..21}
DISCRETE length_Function1D_00010 #
{1..21}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: ((length_Function1D_00001 * width_Function1D_00001) + (length_Function1D_00002 * width_Function1D_00002) + (length_Function1D_00003 * width_Function1D_00003) + (length_Function1D_00004 * width_Function1D_00004) + (length_Function1D_00005 * width_Function1D_00005) + (length_Function1D_00006 * width_Function1D_00006) + (length_Function1D_00007 * width_Function1D_00007) + (length_Function1D_00008 * width_Function1D_00008) + (length_Function1D_00009 * width_Function1D_00009) + (length_Function1D_00010 * width_Function1D_00010))
{46..286}
DISCRETE aux1 #(length_Function1D_00001 * width_Function1D_00001)
{1..273}
DISCRETE aux2 #(length_Function1D_00002 * width_Function1D_00002)
{1..273}
DISCRETE aux3 #(length_Function1D_00003 * width_Function1D_00003)
{1..273}
DISCRETE aux4 #(length_Function1D_00004 * width_Function1D_00004)
{1..273}
DISCRETE aux5 #(length_Function1D_00005 * width_Function1D_00005)
{1..273}
DISCRETE aux6 #(length_Function1D_00006 * width_Function1D_00006)
{1..273}
DISCRETE aux7 #(length_Function1D_00007 * width_Function1D_00007)
{1..273}
DISCRETE aux8 #(length_Function1D_00008 * width_Function1D_00008)
{1..273}
DISCRETE aux9 #(length_Function1D_00009 * width_Function1D_00009)
{1..273}
DISCRETE aux10 #(length_Function1D_00010 * width_Function1D_00010)
{1..273}
**SEARCH**
PRINT[[width_Function1D_00001],[width_Function1D_00002],[width_Function1D_00003],[width_Function1D_00004],[width_Function1D_00005],[width_Function1D_00006],[width_Function1D_00007],[width_Function1D_00008],[width_Function1D_00009],[width_Function1D_00010],[length_Function1D_00001],[length_Function1D_00002],[length_Function1D_00003],[length_Function1D_00004],[length_Function1D_00005],[length_Function1D_00006],[length_Function1D_00007],[length_Function1D_00008],[length_Function1D_00009],[length_Function1D_00010]]
VARORDER STATIC [width_Function1D_00001, width_Function1D_00002, width_Function1D_00003, width_Function1D_00004, width_Function1D_00005, width_Function1D_00006, width_Function1D_00007, width_Function1D_00008, width_Function1D_00009, width_Function1D_00010, length_Function1D_00001, length_Function1D_00002, length_Function1D_00003, length_Function1D_00004, length_Function1D_00005, length_Function1D_00006, length_Function1D_00007, length_Function1D_00008, length_Function1D_00009, length_Function1D_00010]
**TUPLELIST**
negativeSol 12 20
6 2 10 5 2 3 1 3 1 1 14 2 10 14 9 1 2 1 1 1
3 16 1 1 2 1 1 1 1 1 7 16 1 1 1 1 1 1 1 1
9 1 9 2 1 3 1 6 1 1 8 4 8 18 20 2 7 11 2 1
7 3 11 1 16 3 1 1 1 1 4 20 14 21 1 1 1 1 1 1
1 1 4 19 1 5 6 2 1 1 15 11 4 12 1 1 1 1 1 1
15 2 2 2 2 1 1 2 1 1 18 2 1 1 1 1 1 1 1 1
3 12 9 1 2 2 1 1 1 1 18 13 2 14 15 5 1 1 1 1
2 1 6 2 11 4 1 1 1 1 4 5 14 8 15 1 1 1 1 1
4 2 5 13 1 1 4 1 2 1 14 4 17 3 2 12 20 1 1 1
5 2 1 1 1 3 14 1 1 1 18 5 1 1 6 7 11 1 1 1
3 1 2 2 18 3 4 1 1 1 5 4 20 5 10 10 1 1 1 1
4 1 3 1 6 6 3 1 1 1 18 10 11 3 13 14 1 1 1 1
**CONSTRAINTS**
w-inintervalset(aux1, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux2, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux3, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux4, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux5, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux6, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux7, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux8, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux9, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
w-inintervalset(aux10, [1,22,24,28,30,30,32,36,38,40,42,42,44,45,48,52,54,57,60,60,63,66,68,68,70,70,72,72,75,78,80,81,84,85,88,88,90,91,95,96,98,100,102,102,104,105,108,108,110,110,112,112,114,114,117,117,119,121,126,126,128,128,130,130,132,133,135,136,140,140,143,144,147,147,150,150,152,154,156,156,160,160,162,162,165,165,168,171,176,176,180,180,182,182,187,187,189,190,192,192,195,196,198,198,200,200,204,204,208,210,216,216,220,221,224,225,228,228,231,231,234,234,238,238,240,240,242,242,247,247,252,252,255,256,260,260,264,264,266,266,270,270,272,273])
product(length_Function1D_00001, width_Function1D_00001, aux1)
product(length_Function1D_00002, width_Function1D_00002, aux2)
product(length_Function1D_00003, width_Function1D_00003, aux3)
product(length_Function1D_00004, width_Function1D_00004, aux4)
product(length_Function1D_00005, width_Function1D_00005, aux5)
product(length_Function1D_00006, width_Function1D_00006, aux6)
product(length_Function1D_00007, width_Function1D_00007, aux7)
product(length_Function1D_00008, width_Function1D_00008, aux8)
product(length_Function1D_00009, width_Function1D_00009, aux9)
product(length_Function1D_00010, width_Function1D_00010, aux10)
sumleq([aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10],aux0)
sumgeq([aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10],aux0)
negativetable([width_Function1D_00001,width_Function1D_00002,width_Function1D_00003,width_Function1D_00004,width_Function1D_00005,width_Function1D_00006,width_Function1D_00007,width_Function1D_00008,width_Function1D_00009,width_Function1D_00010,length_Function1D_00001,length_Function1D_00002,length_Function1D_00003,length_Function1D_00004,length_Function1D_00005,length_Function1D_00006,length_Function1D_00007,length_Function1D_00008,length_Function1D_00009,length_Function1D_00010
],negativeSol)
**EOF**