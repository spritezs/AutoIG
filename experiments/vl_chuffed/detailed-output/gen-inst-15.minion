MINION 3
**VARIABLES**
DISCRETE width_Function1D_00001 #
{1..76}
DISCRETE width_Function1D_00002 #
{1..76}
DISCRETE length_Function1D_00001 #
{1..11}
DISCRETE length_Function1D_00002 #
{1..11}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: ((length_Function1D_00001 * width_Function1D_00001) + (length_Function1D_00002 * width_Function1D_00002))
{83..752}
DISCRETE aux1 #(length_Function1D_00001 * width_Function1D_00001)
{1..750}
DISCRETE aux2 #(length_Function1D_00002 * width_Function1D_00002)
{1..750}
**SEARCH**
PRINT[[width_Function1D_00001],[width_Function1D_00002],[length_Function1D_00001],[length_Function1D_00002]]
VARORDER STATIC [width_Function1D_00001, width_Function1D_00002, length_Function1D_00001, length_Function1D_00002]
**TUPLELIST**
negativeSol 7 4
72 12 3 2
16 1 10 4
5 41 8 4
50 13 3 11
27 64 4 2
14 61 8 2
16 17 10 11
**CONSTRAINTS**
w-inintervalset(aux1, [1,78,80,82,84,88,90,96,98,100,102,102,104,106,108,108,110,112,114,126,128,130,132,136,138,138,140,148,150,150,152,156,159,162,164,165,168,168,170,172,174,177,180,180,182,190,192,192,195,196,198,198,200,201,203,205,207,210,212,213,215,217,219,220,222,222,224,225,228,228,230,232,234,236,238,238,240,240,242,246,248,248,250,250,252,253,255,256,258,261,264,266,268,268,270,270,272,273,275,276,279,280,282,282,284,288,290,290,292,292,294,297,300,301,304,306,308,308,310,310,312,312,315,315,318,320,322,322,324,325,328,330,333,333,335,336,340,345,348,348,350,352,354,355,357,357,360,360,363,366,368,372,374,376,378,378,380,380,384,385,387,387,390,390,392,392,396,396,399,400,402,402,405,408,410,410,413,414,416,416,418,418,420,420,423,424,426,427,429,430,432,432,434,434,438,438,440,441,444,444,448,448,450,451,455,456,459,460,462,462,464,464,468,470,472,473,476,477,480,480,483,484,486,486,488,488,490,490,495,497,500,500,504,504,506,506,510,513,517,518,520,520,522,522,525,525,528,528,530,532,536,536,539,540,544,544,549,550,552,552,558,558,560,561,567,568,570,570,572,572,576,576,580,580,583,585,590,590,592,592,594,594,600,600,603,603,605,605,608,608,610,610,612,612,616,616,620,621,627,627,630,630,638,640,648,650,657,657,660,660,666,666,670,671,675,675,680,680,682,682,684,684,690,690,693,693,700,700,704,704,710,710,715,715,720,720,726,726,730,730,737,737,740,740,748,748,750,750])
w-inintervalset(aux2, [1,78,80,82,84,88,90,96,98,100,102,102,104,106,108,108,110,112,114,126,128,130,132,136,138,138,140,148,150,150,152,156,159,162,164,165,168,168,170,172,174,177,180,180,182,190,192,192,195,196,198,198,200,201,203,205,207,210,212,213,215,217,219,220,222,222,224,225,228,228,230,232,234,236,238,238,240,240,242,246,248,248,250,250,252,253,255,256,258,261,264,266,268,268,270,270,272,273,275,276,279,280,282,282,284,288,290,290,292,292,294,297,300,301,304,306,308,308,310,310,312,312,315,315,318,320,322,322,324,325,328,330,333,333,335,336,340,345,348,348,350,352,354,355,357,357,360,360,363,366,368,372,374,376,378,378,380,380,384,385,387,387,390,390,392,392,396,396,399,400,402,402,405,408,410,410,413,414,416,416,418,418,420,420,423,424,426,427,429,430,432,432,434,434,438,438,440,441,444,444,448,448,450,451,455,456,459,460,462,462,464,464,468,470,472,473,476,477,480,480,483,484,486,486,488,488,490,490,495,497,500,500,504,504,506,506,510,513,517,518,520,520,522,522,525,525,528,528,530,532,536,536,539,540,544,544,549,550,552,552,558,558,560,561,567,568,570,570,572,572,576,576,580,580,583,585,590,590,592,592,594,594,600,600,603,603,605,605,608,608,610,610,612,612,616,616,620,621,627,627,630,630,638,640,648,650,657,657,660,660,666,666,670,671,675,675,680,680,682,682,684,684,690,690,693,693,700,700,704,704,710,710,715,715,720,720,726,726,730,730,737,737,740,740,748,748,750,750])
product(length_Function1D_00001, width_Function1D_00001, aux1)
product(length_Function1D_00002, width_Function1D_00002, aux2)
sumleq([aux1,aux2],aux0)
sumgeq([aux1,aux2],aux0)
negativetable([width_Function1D_00001,width_Function1D_00002,length_Function1D_00001,length_Function1D_00002
],negativeSol)
**EOF**