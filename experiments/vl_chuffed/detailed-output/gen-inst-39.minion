MINION 3
**VARIABLES**
DISCRETE width_Function1D_00001 #
{1..49}
DISCRETE width_Function1D_00002 #
{1..49}
DISCRETE width_Function1D_00003 #
{1..49}
DISCRETE width_Function1D_00004 #
{1..49}
DISCRETE length_Function1D_00001 #
{1..15}
DISCRETE length_Function1D_00002 #
{1..15}
DISCRETE length_Function1D_00003 #
{1..15}
DISCRETE length_Function1D_00004 #
{1..15}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: ((length_Function1D_00001 * width_Function1D_00001) + (length_Function1D_00002 * width_Function1D_00002) + (length_Function1D_00003 * width_Function1D_00003) + (length_Function1D_00004 * width_Function1D_00004))
{73..698}
DISCRETE aux1 #(length_Function1D_00001 * width_Function1D_00001)
{1..690}
DISCRETE aux2 #(length_Function1D_00002 * width_Function1D_00002)
{1..690}
DISCRETE aux3 #(length_Function1D_00003 * width_Function1D_00003)
{1..690}
DISCRETE aux4 #(length_Function1D_00004 * width_Function1D_00004)
{1..690}
**SEARCH**
PRINT[[width_Function1D_00001],[width_Function1D_00002],[width_Function1D_00003],[width_Function1D_00004],[length_Function1D_00001],[length_Function1D_00002],[length_Function1D_00003],[length_Function1D_00004]]
VARORDER STATIC [width_Function1D_00001, width_Function1D_00002, width_Function1D_00003, width_Function1D_00004, length_Function1D_00001, length_Function1D_00002, length_Function1D_00003, length_Function1D_00004]
**TUPLELIST**
negativeSol 9 8
2 13 15 26 13 5 4 1
19 3 26 6 10 3 3 12
22 23 9 41 4 3 15 3
1 13 18 7 13 15 4 5
42 31 2 10 3 15 3 10
5 46 5 3 6 3 6 13
14 19 22 5 5 11 15 15
26 7 8 29 13 4 8 1
25 33 6 29 10 5 1 7
**CONSTRAINTS**
w-inintervalset(aux1, [1,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,96,98,100,102,102,104,105,108,108,110,112,114,117,119,121,123,126,128,130,132,133,135,136,138,138,140,141,143,145,147,148,150,150,152,156,160,162,164,165,168,172,174,176,180,180,182,182,184,190,192,192,195,196,198,198,200,200,203,205,207,210,215,217,220,222,224,225,228,228,230,232,234,235,238,238,240,240,242,243,245,248,250,250,252,253,255,256,258,261,264,264,266,266,270,270,272,273,275,276,279,280,282,282,285,288,290,290,294,294,296,297,299,301,304,304,306,306,308,308,310,310,312,312,315,315,319,320,322,322,324,325,328,330,333,333,336,336,338,338,340,345,348,348,350,352,360,360,363,364,368,370,372,372,374,378,380,380,384,385,387,387,390,390,392,392,396,396,400,400,403,403,405,408,410,410,414,414,416,416,418,418,420,420,423,423,429,430,432,432,434,435,440,442,444,444,448,448,450,451,455,456,460,460,462,462,465,465,468,468,470,470,473,473,476,476,480,481,484,484,490,490,492,492,494,495,504,504,506,507,510,510,516,518,520,520,525,525,528,528,532,533,539,540,546,546,552,552,555,555,559,560,564,564,570,570,572,572,574,574,576,576,585,585,588,588,598,598,600,600,602,602,611,611,615,616,624,624,630,630,637,637,644,645,658,658,660,660,672,672,675,675,686,686,690,690])
w-inintervalset(aux2, [1,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,96,98,100,102,102,104,105,108,108,110,112,114,117,119,121,123,126,128,130,132,133,135,136,138,138,140,141,143,145,147,148,150,150,152,156,160,162,164,165,168,172,174,176,180,180,182,182,184,190,192,192,195,196,198,198,200,200,203,205,207,210,215,217,220,222,224,225,228,228,230,232,234,235,238,238,240,240,242,243,245,248,250,250,252,253,255,256,258,261,264,264,266,266,270,270,272,273,275,276,279,280,282,282,285,288,290,290,294,294,296,297,299,301,304,304,306,306,308,308,310,310,312,312,315,315,319,320,322,322,324,325,328,330,333,333,336,336,338,338,340,345,348,348,350,352,360,360,363,364,368,370,372,372,374,378,380,380,384,385,387,387,390,390,392,392,396,396,400,400,403,403,405,408,410,410,414,414,416,416,418,418,420,420,423,423,429,430,432,432,434,435,440,442,444,444,448,448,450,451,455,456,460,460,462,462,465,465,468,468,470,470,473,473,476,476,480,481,484,484,490,490,492,492,494,495,504,504,506,507,510,510,516,518,520,520,525,525,528,528,532,533,539,540,546,546,552,552,555,555,559,560,564,564,570,570,572,572,574,574,576,576,585,585,588,588,598,598,600,600,602,602,611,611,615,616,624,624,630,630,637,637,644,645,658,658,660,660,672,672,675,675,686,686,690,690])
w-inintervalset(aux3, [1,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,96,98,100,102,102,104,105,108,108,110,112,114,117,119,121,123,126,128,130,132,133,135,136,138,138,140,141,143,145,147,148,150,150,152,156,160,162,164,165,168,172,174,176,180,180,182,182,184,190,192,192,195,196,198,198,200,200,203,205,207,210,215,217,220,222,224,225,228,228,230,232,234,235,238,238,240,240,242,243,245,248,250,250,252,253,255,256,258,261,264,264,266,266,270,270,272,273,275,276,279,280,282,282,285,288,290,290,294,294,296,297,299,301,304,304,306,306,308,308,310,310,312,312,315,315,319,320,322,322,324,325,328,330,333,333,336,336,338,338,340,345,348,348,350,352,360,360,363,364,368,370,372,372,374,378,380,380,384,385,387,387,390,390,392,392,396,396,400,400,403,403,405,408,410,410,414,414,416,416,418,418,420,420,423,423,429,430,432,432,434,435,440,442,444,444,448,448,450,451,455,456,460,460,462,462,465,465,468,468,470,470,473,473,476,476,480,481,484,484,490,490,492,492,494,495,504,504,506,507,510,510,516,518,520,520,525,525,528,528,532,533,539,540,546,546,552,552,555,555,559,560,564,564,570,570,572,572,574,574,576,576,585,585,588,588,598,598,600,600,602,602,611,611,615,616,624,624,630,630,637,637,644,645,658,658,660,660,672,672,675,675,686,686,690,690])
w-inintervalset(aux4, [1,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,96,98,100,102,102,104,105,108,108,110,112,114,117,119,121,123,126,128,130,132,133,135,136,138,138,140,141,143,145,147,148,150,150,152,156,160,162,164,165,168,172,174,176,180,180,182,182,184,190,192,192,195,196,198,198,200,200,203,205,207,210,215,217,220,222,224,225,228,228,230,232,234,235,238,238,240,240,242,243,245,248,250,250,252,253,255,256,258,261,264,264,266,266,270,270,272,273,275,276,279,280,282,282,285,288,290,290,294,294,296,297,299,301,304,304,306,306,308,308,310,310,312,312,315,315,319,320,322,322,324,325,328,330,333,333,336,336,338,338,340,345,348,348,350,352,360,360,363,364,368,370,372,372,374,378,380,380,384,385,387,387,390,390,392,392,396,396,400,400,403,403,405,408,410,410,414,414,416,416,418,418,420,420,423,423,429,430,432,432,434,435,440,442,444,444,448,448,450,451,455,456,460,460,462,462,465,465,468,468,470,470,473,473,476,476,480,481,484,484,490,490,492,492,494,495,504,504,506,507,510,510,516,518,520,520,525,525,528,528,532,533,539,540,546,546,552,552,555,555,559,560,564,564,570,570,572,572,574,574,576,576,585,585,588,588,598,598,600,600,602,602,611,611,615,616,624,624,630,630,637,637,644,645,658,658,660,660,672,672,675,675,686,686,690,690])
product(length_Function1D_00001, width_Function1D_00001, aux1)
product(length_Function1D_00002, width_Function1D_00002, aux2)
product(length_Function1D_00003, width_Function1D_00003, aux3)
product(length_Function1D_00004, width_Function1D_00004, aux4)
sumleq([aux1,aux2,aux3,aux4],aux0)
sumgeq([aux1,aux2,aux3,aux4],aux0)
negativetable([width_Function1D_00001,width_Function1D_00002,width_Function1D_00003,width_Function1D_00004,length_Function1D_00001,length_Function1D_00002,length_Function1D_00003,length_Function1D_00004
],negativeSol)
**EOF**