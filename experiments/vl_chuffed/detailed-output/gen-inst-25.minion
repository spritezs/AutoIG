MINION 3
**VARIABLES**
DISCRETE width_Function1D_00001 #
{1..87}
DISCRETE width_Function1D_00002 #
{1..87}
DISCRETE width_Function1D_00003 #
{1..87}
DISCRETE width_Function1D_00004 #
{1..87}
DISCRETE width_Function1D_00005 #
{1..87}
DISCRETE length_Function1D_00001 #
{1..9}
DISCRETE length_Function1D_00002 #
{1..9}
DISCRETE length_Function1D_00003 #
{1..9}
DISCRETE length_Function1D_00004 #
{1..9}
DISCRETE length_Function1D_00005 #
{1..9}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: ((length_Function1D_00001 * width_Function1D_00001) + (length_Function1D_00002 * width_Function1D_00002) + (length_Function1D_00003 * width_Function1D_00003) + (length_Function1D_00004 * width_Function1D_00004) + (length_Function1D_00005 * width_Function1D_00005))
{78..219}
DISCRETE aux1 #(length_Function1D_00001 * width_Function1D_00001)
{1..215}
DISCRETE aux2 #(length_Function1D_00002 * width_Function1D_00002)
{1..215}
DISCRETE aux3 #(length_Function1D_00003 * width_Function1D_00003)
{1..215}
DISCRETE aux4 #(length_Function1D_00004 * width_Function1D_00004)
{1..215}
DISCRETE aux5 #(length_Function1D_00005 * width_Function1D_00005)
{1..215}
**SEARCH**
PRINT[[width_Function1D_00001],[width_Function1D_00002],[width_Function1D_00003],[width_Function1D_00004],[width_Function1D_00005],[length_Function1D_00001],[length_Function1D_00002],[length_Function1D_00003],[length_Function1D_00004],[length_Function1D_00005]]
VARORDER STATIC [width_Function1D_00001, width_Function1D_00002, width_Function1D_00003, width_Function1D_00004, width_Function1D_00005, length_Function1D_00001, length_Function1D_00002, length_Function1D_00003, length_Function1D_00004, length_Function1D_00005]
**TUPLELIST**
negativeSol 8 10
5 16 5 21 18 8 2 5 1 5
2 1 38 4 23 6 2 2 8 4
1 10 1 1 17 2 9 2 6 7
10 1 6 21 8 8 9 3 3 3
23 4 12 10 1 6 3 1 5 5
27 26 11 4 2 2 2 9 2 2
7 16 30 49 6 8 3 2 1 1
1 3 1 24 7 4 2 4 8 1
**CONSTRAINTS**
w-inintervalset(aux1, [1,88,90,96,98,100,102,102,104,106,108,108,110,112,114,120,122,126,128,130,132,136,138,138,140,142,144,148,150,150,152,156,158,162,164,166,168,168,170,172,174,177,180,180,182,186,188,190,192,192,195,196,198,198,200,201,203,205,207,208,210,210,212,213,215,215])
w-inintervalset(aux2, [1,88,90,96,98,100,102,102,104,106,108,108,110,112,114,120,122,126,128,130,132,136,138,138,140,142,144,148,150,150,152,156,158,162,164,166,168,168,170,172,174,177,180,180,182,186,188,190,192,192,195,196,198,198,200,201,203,205,207,208,210,210,212,213,215,215])
w-inintervalset(aux3, [1,88,90,96,98,100,102,102,104,106,108,108,110,112,114,120,122,126,128,130,132,136,138,138,140,142,144,148,150,150,152,156,158,162,164,166,168,168,170,172,174,177,180,180,182,186,188,190,192,192,195,196,198,198,200,201,203,205,207,208,210,210,212,213,215,215])
w-inintervalset(aux4, [1,88,90,96,98,100,102,102,104,106,108,108,110,112,114,120,122,126,128,130,132,136,138,138,140,142,144,148,150,150,152,156,158,162,164,166,168,168,170,172,174,177,180,180,182,186,188,190,192,192,195,196,198,198,200,201,203,205,207,208,210,210,212,213,215,215])
w-inintervalset(aux5, [1,88,90,96,98,100,102,102,104,106,108,108,110,112,114,120,122,126,128,130,132,136,138,138,140,142,144,148,150,150,152,156,158,162,164,166,168,168,170,172,174,177,180,180,182,186,188,190,192,192,195,196,198,198,200,201,203,205,207,208,210,210,212,213,215,215])
product(length_Function1D_00001, width_Function1D_00001, aux1)
product(length_Function1D_00002, width_Function1D_00002, aux2)
product(length_Function1D_00003, width_Function1D_00003, aux3)
product(length_Function1D_00004, width_Function1D_00004, aux4)
product(length_Function1D_00005, width_Function1D_00005, aux5)
sumleq([aux1,aux2,aux3,aux4,aux5],aux0)
sumgeq([aux1,aux2,aux3,aux4,aux5],aux0)
negativetable([width_Function1D_00001,width_Function1D_00002,width_Function1D_00003,width_Function1D_00004,width_Function1D_00005,length_Function1D_00001,length_Function1D_00002,length_Function1D_00003,length_Function1D_00004,length_Function1D_00005
],negativeSol)
**EOF**